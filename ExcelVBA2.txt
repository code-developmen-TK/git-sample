Option Explicit

Sub ボタン1_Click()
'excel VBAを利用し、テンプレートとなるワードファイルの一部分を
'https://oshiete.goo.ne.jp/qa/5989414.html
'
Dim wdApp As Word.Application
Dim wdDoc As Word.Document
Dim wdRng As Word.Range
Dim Fname As String
Dim sOutputAs As String
Dim mPath As String
Dim mRowAs As Long
Dim sh As Worksheet

Set wdApp = New Word.Application

Const CALC_SHEET As String = "Sheet1" '←シート名

Set sh = Worksheets(CALC_SHEET) 'データ取得用シート

sh.Select

mPath = ActiveWorkbook.path & "\"

Fname = mPath & "xxxxxx.doc"

sOutput = mPath & "\"

On Error GoTo ErrHandler
'元の文書

    If Dir(Fname) = "" Then

        MsgBox "元の文書がありません。", vbExclamation

        GoTo ErrHandler
        
    End If
    
    mRow = 3
    
    Do
    
        With wdApp
            Set wdDoc = .Documents.Open(Fname)
            Set wdRng = wdDoc.Content
        End With

        With wdRng.Find
            .Text = "[置換対象文字]"
            .Forward = True
            .Replacement.Text = Range("C" & mRow).Value
            .MatchCase = False
            .MatchWildcards = False
            .MatchFuzzy = True
            '.Execute Replace:=wdReplaceAll 'Ver Word2003
            .Execute , , , , , , , , , , wdReplaceAll
        End With
        
        sOutput = mPath & "test1\" & Range("C" & mRow).Value & ".doc"
        wdDoc.SaveAs sOutput '置換後のword文書を別名で保存
        wdDoc.Close False
        mRow = mRow + 1
        
    Loop Until sh.Range("C" & mRow).Value = ""

    wdApp.Quit

ErrHandler:
    If Err.Number > 0 Then
        MsgBox Err.Number & " : " & Err.Description
    Else
        Beep '正常終了
    End If
    
    Set wdRng = Nothing
    Set wdDoc = Nothing
    Set wdApp = Nothing
    Set sh = Nothing
    
End Sub
 
 Sub WordDocDupulicate()
    Dim wdApp As Word.Application
    Dim wdDoc As Word.Document
    Dim wdRng As Word.Range
    Dim Fname   As String
    Dim sOutput As String
 
    Dim mPath   As String
    Dim iRowCount As Long
    Dim jColCount As Long
    Dim sh As Worksheet
    Set wdApp = New Word.Application
 
    Const dataSheet As String = "data"
    Const dataItem  As Long = 3         '項目行
    
    Set sh = Worksheets(dataSheet)
    sh.Select
 
    mPath = ActiveWorkbook.path & "\"
    Fname = mPath & "template.docx"
 
    sOutput = mPath & "\"
    
    On Error GoTo ErrHandler
    'テンプレート文書
    If Dir(Fname) = "" Then
        MsgBox "テンプレート文書がありません。", vbExclamation
        GoTo ErrHandler
    End If
    
    iRowCount = dataItem + 1         '先頭data行
    
    Do
        With wdApp
            Set wdDoc = .Documents.Open(Fname)
            Set wdRng = wdDoc.Content
        End With
        
        jColCount = 1
        Do
            Debug.Print "項目: " & Cells(dataItem, jColCount).Value
            Debug.Print "置換: " & Cells(iRowCount, jColCount).Value
        
            With wdRng.Find
                .Text = "{" & Cells(dataItem, jColCount).Value & "}"
                .Forward = True
                If Cells(dataItem, jColCount).Value = "日付" Then
                    .Replacement.Text = Format(Cells(iRowCount, jColCount).Value, "gggee年mm月dd日")
                Else
                    .Replacement.Text = Cells(iRowCount, jColCount).Value
                End If
                .MatchCase = False
                .MatchWildcards = False
                .MatchFuzzy = True
                '.Execute Replace:=wdReplaceAll 'Ver Word2003
                .Execute , , , , , , , , , , wdReplaceAll
            End With
            jColCount = jColCount + 1
       Loop Until sh.Cells(iRowCount, jColCount).Value = ""
   
       sOutput = mPath & Cells(iRowCount, 1).Value & ".docx"
       Debug.Print "sOutput: " & sOutput
        
       wdDoc.SaveAs sOutput '保存word文書名
       wdDoc.Close False
       iRowCount = iRowCount + 1
   Loop Until sh.Cells(iRowCount, 1).Value = ""
   wdApp.Quit

ErrHandler:
    If Err.Number > 0 Then
        MsgBox Err.Number & " : " & Err.Description
    Else
        Beep '正常終了
    End If
    Set wdRng = Nothing
    Set wdDoc = Nothing
    Set wdApp = Nothing
    Set sh = Nothing
End Sub

Sub ReplaceTextInWordDoc()
'このコードでは、 CreateObject("Word.Application") を使ってWordアプリケーションを開き、 Documents.Open メソッドを使ってテンプレートファイルを開いています。置換する文字列は、 searchStrings 配列に格納されています。これを必要に応じて変更してください。
'Excel表に入力された値は、 name 、 address 、 phone 変数に格納されています。これらの値を取得するために、 Range メソッドを使ってExcel表のセルを参照しています。このため、このコードを実行する前に、Excel表に値が入力されていることを確認してください。
 'by ChatGPT

    ' テンプレートファイルのパスを指定
    Dim templatePath As String
    templatePath = "C:\path\to\template\file.docx"
    
    ' 置換する文字列を指定
    Dim searchStrings As Variant
    searchStrings = Array("<<Name>>", "<<Address>>", "<<Phone>>")
    
    ' Excel表に入力された値を取得
    Dim name As String
    Dim address As String
    Dim phone As String
    name = Range("A1").Value
    address = Range("B1").Value
    phone = Range("C1").Value
    
    ' Wordアプリケーションを開く
    Dim wordApp As Word.Application
    Set wordApp = CreateObject("Word.Application")
    wordApp.Visible = True
    
    ' テンプレートファイルを開く
    Dim doc As Word.Document
    Set doc = wordApp.Documents.Open(templatePath)
    
    ' 文書の全範囲を検索して置換する
    Dim i As Integer
    For i = LBound(searchStrings) To UBound(searchStrings)
        With doc.Content.Find
            .Text = searchStrings(i)
            .Replacement.Text = GetReplacementValue(i, name, address, phone) ' 置換する値を取得する関数を呼び出す
            .Wrap = wdFindContinue
            .Execute Replace:=wdReplaceAll
        End With
    Next i
    
    ' 文書を保存して閉じる
    doc.Save
    doc.Close
    
    ' Wordアプリケーションを終了する
    wordApp.Quit
    
End Sub

Function GetReplacementValue(index As Integer, name As String, address As String, phone As String) As String
 'by ChatGPT
    Select Case index
        Case 0 ' <<Name>> を置換する
            GetReplacementValue = name
        Case 1 ' <<Address>> を置換する
            GetReplacementValue = address
        Case 2 ' <<Phone>> を置換する
            GetReplacementValue = phone
    End Select
End Function

Sub LoadDataToArray()
'このコードでは、 Variant 型の data 変数を宣言して、Excel表の全体を格納するための2次元配列として使用します。また、 numRows と numCols 変数を宣言して、Excel表の行数と列数を格納します。
'With ステートメントを使用して、Excel表の範囲を指定し、 Range プロパティを使用してその範囲の値を取得して data 変数に代入します。
'最後に、 data 配列をループ処理して、各セルの値を表示します。必要に応じて、このループを修正して、2次元配列 data 内のデータを必要な方法で処理できます。
 'by ChatGPT
 
    Dim data As Variant
    Dim numRows As Long
    Dim numCols As Long
    Dim i As Long
    Dim j As Long
    
    ' Excel表の範囲を指定
    With ThisWorkbook.Worksheets("Sheet1")
        numRows = .UsedRange.Rows.Count
        numCols = .UsedRange.Columns.Count
        data = .Range(.Cells(1, 1), .Cells(numRows, numCols)).Value
    End With
    
    ' 2次元配列に格納したデータを表示
    For i = 1 To numRows
        For j = 1 To numCols
            Debug.Print data(i, j)
        Next j
    Next i
    
End Sub

Sub FillWeekdays()
'このコードでは、設定した年度の1月1日から12月31日までの日付をループ処理して、祝日を除いた月曜日から金曜日までの範囲を設定し、ワークシートに出力します。
'祝日の日付は、 IsHoliday 関数で設定されています。この関数を修正して、必要に応じて
 'by ChatGPT
    Dim year As Integer
    Dim startDate As Date
    Dim endDate As Date
    Dim currentDate As Date
    Dim cell As Range
    Dim int_weekday As Integer
    
    ' 設定する年度を指定
    year = 2023
    
    ' 計算開始日を年度の1月1日に設定
    startDate = DateSerial(year, 1, 1)
    
    ' ワークシートのB1セルから始め、1週間毎に日付範囲を設定
    Set cell = ThisWorkbook.Worksheets("Sheet1").Range("B1")
    
    ' 日付のループ処理
    For currentDate = startDate To DateSerial(year, 12, 31)
        
        ' 祝日以外の月曜日から金曜日までの範囲を設定
        int_weekday = weekday(currentDate, vbMonday)
        If int_weekday >= 2 And int_weekday <= 6 And Not IsHoliday(currentDate) Then
            endDate = currentDate
            Do While weekday(endDate, vbMonday) <> 6 And Not IsHoliday(endDate)
                endDate = endDate + 1
            Loop
            If weekday(endDate, vbMonday) = 6 Then
                cell.Value = Format(currentDate, "yyyy/m/d") & " ～ " & Format(endDate, "yyyy/m/d")
                Set cell = cell.Offset(1, 0)
            End If
        End If
        
    Next currentDate
End Sub

Function IsHoliday(dateValue As Date) As Boolean
' 祝日の日付を設定
'by ChatGPT
    Dim holidays As Variant
    holidays = Array(#1/1/2023#, #1/2/2023#, #2/11/2023#, #2/23/2023#, #3/20/2023#, #4/29/2023#, #5/3/2023#, #5/4/2023#, #5/5/2023#, #7/17/2023#, #8/11/2023#, #9/18/2023#, #9/23/2023#, #10/9/2023#, #11/3/2023#, #11/23/2023#, #12/23/2023#)
    Dim i As Integer
    
    ' 祝日であるかどうかを判定
    IsHoliday = False
    For i = 0 To UBound(holidays)
        If holidays(i) = dateValue Then
            IsHoliday = True
            Exit For
        End If
    Next i
End Function

Sub FillWeekdays2()
'このコードでは、設定した年度の1月1日から12月31日までの日付をループ処理して、
'祝日を除いた月曜日から金曜日までの範囲を設定し、ワークシートに出力します。
'祝日の日付は、 IsHoliday 関数を使用することで、祝日を除外します。前回の
'コードの IsHoliday 関数を使用することができます。

    Dim current_year As Integer
    Dim startDate As Date
    Dim endDate As Date
    Dim currentDate As Date
    Dim cell As Range
    Dim int_weekday As Integer
    Dim i As Integer
    
    
    ' 設定する年度を指定
    current_year = 2023
    
    ' 計算開始日を年度の1月1日に設定
    startDate = DateSerial(current_year, 4, 1)
    
    ' ワークシートのB1セルから始め、1週間毎に日付範囲を設定
    Set cell = ThisWorkbook.Worksheets("Sheet1").Range("B1")
    
    ' 週のループ処理
    For i = 1 To 52
        
        ' 週の開始日と終了日を設定
        currentDate = DateAdd("ww", i - 1, startDate)
        If weekday(currentDate, vbMonday) <> 1 Then
            currentDate = DateAdd("d", (2 - weekday(currentDate, vbMonday)), currentDate)
        End If
        endDate = DateAdd("d", 4, currentDate)
        
        ' 日付範囲を設定
        If year(currentDate) = current_year Then
            cell.Value = Format(currentDate, "m/d") & " ～ " & Format(endDate, "m/d")
            Set cell = cell.Offset(1, 0)
        End If
        
    Next i
End Sub

Sub ExportToHTML()
'by ChatGPT
    Dim html As String
    Dim i As Long
    Dim j As Long
    
    ' HTMLの開始タグを設定
    html = "<table>"
    
    ' 表のデータをHTMLのテーブルに変換
    For i = 1 To ActiveSheet.UsedRange.Rows.Count
        html = html & "<tr>"
        For j = 1 To ActiveSheet.UsedRange.Columns.Count
            html = html & "<td>" & Cells(i, j).Value & "</td>"
        Next j
        html = html & "</tr>"
    Next i
    
    ' HTMLの終了タグを設定
    html = html & "</table>"
    
    ' 変換結果を出力
    Open "C:\output.html" For Output As #1
    Print #1, html
    Close #1
End Sub

Sub ExportToHTMLWithCSS()
'このコードでは、Excelのアクティブなシートの表をHTMLのテーブルに変換して、C:\output.htmlに出力します。
'また、CSSを適用して、テーブルに罫線とセルの内部余白を追加します。
'CSSの部分は、cssという変数に文字列として代入され、<style>と</style>の間に挿入されます。
'このCSSは、テーブルの罫線を非表示にしたい場合や、テーブルのセルのスタイルを変更したい場合に自由に
'変更してください。出力先のファイル名やパスは、必要に応じて変更してください。
'by ChatGPT

    Dim html As String
    Dim i As Long
    Dim j As Long
    
    ' HTMLの開始タグを設定
    html = "<table class='my-table'>"
    
    ' 表のデータをHTMLのテーブルに変換
    For i = 1 To ActiveSheet.UsedRange.Rows.Count
        html = html & "<tr>"
        For j = 1 To ActiveSheet.UsedRange.Columns.Count
            html = html & "<td>" & Cells(i, j).Value & "</td>"
        Next j
        html = html & "</tr>"
    Next i
    
    ' HTMLの終了タグを設定
    html = html & "</table>"
    
    ' CSSを設定
    Dim css As String
    css = "<style>" & vbCrLf
    css = css & ".my-table {" & vbCrLf
    css = css & "  border-collapse: collapse;" & vbCrLf
    css = css & "}" & vbCrLf
    css = css & ".my-table td {" & vbCrLf
    css = css & "  border: 1px solid #000;" & vbCrLf
    css = css & "  padding: 5px;" & vbCrLf
    css = css & "}" & vbCrLf
    css = css & "</style>" & vbCrLf
    
    ' 変換結果を出力
    Open "C:\output.html" For Output As #1
    Print #1, "<html>" & vbCrLf
    Print #1, "<head>" & vbCrLf
    Print #1, css
    Print #1, "</head>" & vbCrLf
    Print #1, "<body>" & vbCrLf
    Print #1, html
    Print #1, "</body>" & vbCrLf
    Print #1, "</html>" & vbCrLf
    Close #1
End Sub

Sub ImportFilenames()
'このコードでは、ファイルが格納されているフォルダのパスをpathに指定し、Dir()関数を使用して
'ファイルのリストを取得します。取得したファイル名は、Split()関数を使用してピリオドで分割し、
'Excelの表に書き込みます。この例では、ファイル名の文書コードをA列、作業マニュアル名をB列、
'日付をC列に書き込みます。
'ファイル名の形式によっては､上記のコードが正常に動作しない可能性があります｡必要に応じて､
'ファイル名の形式に合わせてコードを変更してください｡また､ファイルの読み込み先のパスも適切に
'設定してください｡
'by ChatGPT
Dim path As String
    Dim files As Variant
    Dim filename As Variant
    Dim row As Long
    
    ' ファイルが格納されているフォルダのパスを設定
    path = "C:\Documents\"
    
    ' 指定したパスに格納されているファイルのリストを取得
    files = Dir(path & "*.pdf")
    
    ' ファイル名をピリオドで分割してExcelの表に書き込む
    row = 1
    Do While files <> ""
        filename = Split(files, ".")
        Cells(row, 1).Value = filename(0) ' 文書コード
        Cells(row, 2).Value = filename(1) ' 作業マニュアル名
        Cells(row, 3).Value = filename(2) ' 日付
        row = row + 1
        files = Dir()
    Loop
End Sub

Sub ExportTableAsHTML()
'このコードでは、ExcelファイルのパスをworkbookPathに指定し、Workbooks.Open()メソッドを
'使用してExcelファイルを開きます。次に、Excelファイルの1番目のシートのテーブル範囲を取
'得し、ループを使用して各行の値をHTMLのテーブルに追加します。最後に、HTMLファイルを出力
'します。HTMLファイルの出力先フォルダをoutputFolderに指定しています。
'このコードは､ファイル名リストが含まれるExcelファイルを開く必要があります｡必要に応じて､
'ファイル名リストが含まれるシート番号を変更してください｡また､HTMLのテーブルの形式をカス
'タマイズする必要がある場合は､適切にコードを変更してください｡
'by ChatGPT

' HTMLファイルの出力先フォルダを設定
    Const outputFolder As String = "C:\html\"
    
    ' Excelファイルのパスを設定
    Const workbookPath As String = "C:\data\filename_list.xlsx"
    
    ' Excelファイルを開く
    Dim wb As Workbook
    Set wb = Workbooks.Open(workbookPath)
    
    ' テーブルの範囲を設定
    Dim tableRange As Range
    Set tableRange = wb.Sheets(1).Range("A1:C" & wb.Sheets(1).Cells.SpecialCells(xlLastCell).row)
    
    ' HTMLのテーブルを作成
    Dim html As String
    html = "<table>" & vbCrLf
    
    Dim row As Range
    For Each row In tableRange.Rows
        html = html & "<tr>" & vbCrLf
        html = html & "<td>" & row.Cells(1).Value & "</td>" & vbCrLf
        html = html & "<td>" & row.Cells(2).Value & "</td>" & vbCrLf
        html = html & "<td>" & row.Cells(3).Value & "</td>" & vbCrLf
        html = html & "</tr>" & vbCrLf
    Next row
    
    html = html & "</table>"
    
    ' HTMLファイルを出力
    Dim filename As String
    filename = "filename_list.html"
    Open outputFolder & filename For Output As #1
    Print #1, html
    Close #1
    
    ' Excelファイルを閉じる
    wb.Close False
End Sub

Sub GetFiles()
'このコードを実行すると、Excelのアクティブなワークシートに、各サブフォルダ内の
'ファイル名がフォルダごとに分類された表が作成されます。ファイル名を取得する
'フォルダを変更するには、objFolderの値を変更してください。
'by ChatGPT

    Dim objFSO As Object
    Dim objFolder As Object
    Dim objSubFolder As Object
    Dim objFile As Object
    Dim i As Integer
    Dim lastRow As Long
    
    '現在のフォルダを取得する
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    Set objFolder = objFSO.GetFolder(ThisWorkbook.path)
    
    'ヘッダー行を書き込む
    Range("A1").Value = "フォルダ名"
    Range("B1").Value = "ファイル名"
    
    i = 2 '最初のデータ行
    'すべてのサブフォルダをループする
    For Each objSubFolder In objFolder.SubFolders
        'サブフォルダ内のすべてのファイルをループする
        For Each objFile In objSubFolder.files
            'フォルダ名とファイル名を書き込む
            Cells(i, 1).Value = objSubFolder.name
            Cells(i, 2).Value = objFile.name
            i = i + 1
        Next objFile
    Next objSubFolder
    
    'データテーブルを自動整形する
'    lastRow = Range("A1").End(xlDown).row
'    Range("A1:B" & lastRow).Select
'    ActiveSheet.ListObjects.Add(xlSrcRange, Selection, , xlYes).name = "Table1"
'    Range("Table1[#All]").Select
'    Range("Table1[#All]").EntireColumn.AutoFit
    
End Sub

