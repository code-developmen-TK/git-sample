Option Compare Database


Public Sub csvのインポート()
Dim 所定のパス As String
Dim FileName As String
Dim ExistFlag As Boolean
Dim ErrorMessage As String
Dim DB As DAO.Database
Dim rs As DAO.Recordset

On Error GoTo 0

所定のパス = "C:\～～～～～\～～～.csv"

FileName = Dir(所定のパス)

If InStr(1, FileName, ".") > 0 Then
  
  FileName = Left(FileName, InStrRev(FileName, ".") - 1)

End If

On Error Resume Next 'エラーが起きても、無視して、次の行から再開

    DoCmd.RunSQL "DROP TABLE [" & FileName & "_インポート エラー]" '既存のインポートエラーのテーブルを削除

On Error GoTo 0 'エラーが起きたら、VBAの標準のエラー処理

    DoCmd.TransferText acImportDelim, , "temp", 所定のパス, True

On Error Resume Next

'インポートエラーのテーブルが生成されていたらExistFlagがTrue
    ExistFlag = CurrentDb.TableDefs(FileName & "_インポート エラー").Name = FileName & "_インポート エラー"

    If ExistFlag = True Then
  
        Set DB = CurrentDb()
  
        Set rs = DB.OpenRecordset(FileName & "_インポート エラー", dbOpenTable)
  
        ErrorMessage = "インポートでエラーが発生しました。処理を中断します。" + vbCrLf
  
        Do Until rs.EOF
    
            ErrorMessage = ErrorMessage & rs!行 & "行目のフィールド「" _
            & rs!フィールド & "」で「" & rs!エラー & "」が発生" & vbCrLf
    
            rs.MoveNext
  
        Loop
  
        Set rs = Nothing
  
        Set DB = Nothing
  
        MsgBox ErrorMessage
  
        Exit Sub

    End If

On Error GoTo 0

'インポートが成功した場合の続きの処理をここに書く
(略)
End Sub

Public Function drop_import_error_table()
'インポートエラーテーブルは必要ないから全消
'https://qiita.com/waokitsune/items/1de358a6f0133ed57bb7
    Dim tbl_ As DAO.TableDef
    
    For Each tbl_ In CurrentDb.TableDefs
    
        If tbl_.Name Like "*_インポート エラー*" Then
        
            DoCmd.DeleteObject acTable, tbl_.Name
            
        End If
        
    Next

End Function



Public Function ExistTable(tableName As String) As Boolean
'----------------------------------------------------------------------------------
'     関数名   : ExistTable
'     処理内容 : テーブル存在チェック
'     引  数　 : TableName
'     戻り値　 : 結果
'【Access】TableDefsでテーブル存在チェック
'https://t-yumi.jp/gengo/access/201907200925541355.html
' ----------------------------------------------------------------------------------
On Error Resume Next

    ExistTable = CurrentDb.TableDefs(tableName).Name = tableName
    
End Function


Function FileSelect() As String
'参照設定を使用せずにアクセスでファイル選択ダイアログを使うには
'https://waq3-travelog.com/file-picker-dialog/

Dim varTgtFleNM As Variant

On Error GoTo ErrHNDL  'エラー処理を宣言します。エラーが生じたら ErrHNDL 部分へ飛びます。

'ファイル参照用の設定値をセットします。
'ファイルを選択する場合は、msofiledialogfilepicker →　3（定数）
With Application.FileDialog(3)

     'ダイアログタイトル名
     .Title = "ファイルを選択してください"

     'ファイルの種類を定義します。
     .Filters.Add "HTML ファイル", "*.html"
     .Filters.Add "HTMファイル", "*.htm"
     .Filters.Add "すべてのファイル", "*.*"

     '複数ファイル選択を可能にする場合はTrue、不可の場合はFalse。
     .AllowMultiSelect = False

     '最初に開くフォルダーを、当ファイルが存在しているフォルダーとします。
     .InitialFileName = CurrentProject.Path & "\"

     If .Show = -1 Then 'ファイルが選択されれば　-1 を返します。
         For Each varTgtFleNM In .SelectedItems
             FileSelect = varTgtFleNM
         Next
     End If
End With
Exit Function

ErrHNDL:

     MsgBox Err.Number & vbCrLf & Err.Description
     Exit Function
End Function



Public Function GetFileName() As String
'**************************************************
'ファイルを開くダイアログの例
'Officeオブジェクトを使った"ファイル選択"ダイアログ
'https://tsware.jp/tips/tips_221.htm
'※下記方法を使うためには、VBEの[ツール]-[参照設定]メニューを実行し、「参照可能なライブラリファイル」一覧の"Microsoft Office10.0 Object Library"の項目にチェックを付けておく必要があります。
'**************************************************
  Dim intRet As Integer
  
  With Application.FileDialog(msoFileDialogOpen)
    'ダイアログのタイトルを設定
    .Title = "ファイルを開くダイアログの例"
    'ファイルの種類を設定
    .Filters.Clear
    .Filters.Add "Microsoft Access データベース", "*.mdb"
    .Filters.Add "Microsoft Access プロジェクト", "*.adp"
    .Filters.Add "MDE ファイル", "*.mde"
    .Filters.Add "すべてのファイル", "*.*"
    'ファイルの種類の初期値を設定
    .FilterIndex = 1
    '複数ファイル選択を許可しない
    .AllowMultiSelect = False
    '初期パスを設定
    .InitialFileName = CurrentProject.Path
    'ダイアログを表示
    intRet = .Show
    If intRet <> 0 Then
      'ファイルが選択されたとき
      'そのフルバスを返り値に設定
      GetFileName = Trim(.SelectedItems.Item(1))
    Else
      'ファイルが選択されなければ長さゼロの文字列を返す
      GetFileName = ""
    End If
  End With

End Function
sub test()
Dim strFileName As String

'ファイルを開くダイアログを表示
strFileName = GetFileName()

'選択結果を評価
If Len(strFileName) > 0 Then
  MsgBox strFileName & "が選択されました！"
Else
  MsgBox "ファイルは選択されませんでした！"
End If
end sub


------------------------------------------------------------------------------------------
Function FileSelect() As String
'************************************************************************
'参照設定を使用せずにアクセスでファイル選択ダイアログを使うには
'https://waq3-travelog.com/file-picker-dialog/
'
'
'**************************************************************************
Dim varTgtFleNM As Variant

On Error GoTo ErrHNDL  'エラー処理を宣言します。エラーが生じたら ErrHNDL 部分へ飛びます。

'ファイル参照用の設定値をセットします。
'ファイルを選択する場合は、msofiledialogfilepicker →　3（定数）
With Application.FileDialog(3)

     'ダイアログタイトル名
     .Title = "ファイルを選択してください"

     'ファイルの種類を定義します。
     .Filters.Add "HTML ファイル", "*.html"
     .Filters.Add "HTMファイル", "*.htm"
     .Filters.Add "すべてのファイル", "*.*"

     '複数ファイル選択を可能にする場合はTrue、不可の場合はFalse。
     .AllowMultiSelect = False

     '最初に開くフォルダーを、当ファイルが存在しているフォルダーとします。
     .InitialFileName = CurrentProject.Path & "\"

     If .Show = -1 Then 'ファイルが選択されれば　-1 を返します。
         For Each varTgtFleNM In .SelectedItems
             FileSelect = varTgtFleNM
         Next
     End If
End With
Exit Function

ErrHNDL:

     MsgBox Err.Number & vbCrLf & Err.Description
     Exit Function
End Function
----------------------------------------------------------------------------------
Private Sub コマンド5_Click()
Dim strSQL As String

strSQL = strSQL & " " & vbNewLine
strSQL = strSQL & ";" & vbNewLine

CurrentDb.QueryDefs("Q_TEST").SQL = strSQL
DoCmd.OpenQuery "Q_TEST"

End Sub
----------------------------------------------------------------------------------
https://hensa40.cutegirl.jp/archives/6280
他のAccessファイルのテーブルのデータを取得する
次は、他のAccessファイルのテーブルデータを取得するサンプルになります。サンプルのように IN に続いて、データを保持しているファイルのパスを設定します。

1
2
' 他のAccessファイルのテーブルデータを取得する
CurrentDb.QueryDefs("クエリ1").sql = "SELECT * FROM テーブル1 IN 'C:\test.mdb';"


------------------------------------------------------------------------------------
2つの表「テーブルA」と「テーブルB」を比較し、「テーブルA」に存在しない行を「テーブルB」からINSERTするSQLです。
https://www.projectgroup.info/tips/Oracle/SQL/SQL000001.html


insert into テーブルA
select * 
from   テーブルB TAB_B
where not exists(
    select 'X' 
    from   テーブルA TAB_A
    where  TAB_A.キー = TAB_B.キー
)
------------------------------------------------------------------------------------------
Microsoft Access小技集004一時的にクエリをVBAで作成する
https://xn--access-n47kg219a.com/kowaza004-2.html

Dim qdf As QueryDef    ←QueryDefの宣言

strsql = "Select xxxxxxx"

Set qdf = CurrentDb.CreateQueryDef("Q_XXXXXXX", strsql)　　　←ここでQueryが作成される
　　～　ここにQueryを使用した処理を入れる　～
CurrentDb.QueryDefs.Delete "Q_XXXXXX"　　←Queryの削除

Set qdf = Nothing
※↑でQuery　がうまく削除されずに残ったままになっている場合はエラーになるので、OnErrorの処理で以下を入れておく。

ERR_EXT:
If Err.Number = 3012 Then
CurrentDb.QueryDefs.Delete “Q_XXXXXX”
Resume
Else
MsgBox Err.Description
End If

------------------------------------------------------------------------------------------
Microsoft Access小技集021－画面間のパラメータの引渡し方
https://xn--access-n47kg219a.com/microsoft-access%e5%b0%8f%e6%8a%80%e9%9b%86021%ef%bc%8d%e7%94%bb%e9%9d%a2%e9%96%93%e3%81%ae%e3%83%91%e3%83%a9%e3%83%a1%e3%83%bc%e3%82%bf%e3%81%ae%e5%bc%95%e6%b8%a1%e3%81%97%e6%96%b9.html

【A画面からB画面を開く際に渡したい情報を設定する】
DoCmd.OpenForm “F_B画面”, acNormal, , , , , , txtParam
↑渡したい情報

【A画面で渡された情報をB画面で受け取る】
txtNo = Me.OpenArgs
↑ OpenArgs　に入っています
-------------------------------------------------------------------------------------------
Accessからストアドを実行
https://pctips.jp/pc-soft/sqlserver-access-stored-procedure202002/


Private Sub stock_calc_btn_Click()
    Dim Cnn As New ADODB.Connection
    Dim cmd As New ADODB.Command
    Dim strMsg As String
On Error GoTo Err_stock_calc_btn_Click
   
    'SQLServer接続設定＆接続
    With Cnn
        .Provider = "SQLOLEDB"
        .ConnectionString = "Data Source=サーバー名;" & _
            "Initial Catalog=Logistics;" & _
            "User ID=ユーザーID;" & _
            "Password=パスワード"
        .Open
    End With

    'ストアドプロシージャ呼び出し設定＆呼び出し
    With cmd
        .CommandTimeout = 0             'タイムアウト設定を無制限に
        .ActiveConnection = Cnn         'サーバー接続設定
        .CommandText = "stock_calc"      'ストアド名セット
        .CommandType = adCmdStoredProc  'ストアドなのでadCmdStoredProc
       
        '戻り値設定
        .Parameters.Append .CreateParameter("@rtn", adInteger, adParamReturnValue)
       
        '実行※レコードは返ってこないのでadExecuteNoRecords
        .Execute , , adExecuteNoRecords
       
        '戻り値の判断＆表示用メッセージ生成
        If .Parameters.Item("@rtn").Value = 0 Then
            strMsg = "正常終了しました"
        Else
            strMsg = "異常終了しました" & vbCrLf & _
                    "ErrNO=" & .Parameters.Item("@rtn").Value
        End If
    End With

Exit_stock_calc_btn_Click:
    '接続解除
    Cnn.Close
    Set Cnn = Nothing
    'メッセージ表示
    MsgBox strMsg
    Exit Sub

Err_stock_calc_btn_Click:
    'ストアド以外の場所でのエラーなので、VBAのErrの情報セット
    strMsg = "異常終了しました" & vbCrLf & _
            "ErrNO=" & Err.Number & " ErrMsg=" & Err.Description
    Resume Exit_stock_calc_btn_Click

End Sub

-------------------------------------------------------------------------------------------
*******************************************************************************************
データベース（Access 等）に接続（ADO）
https://excelwork.info/excel/databaseadobase/

　
Sub Sample_ADO_Access1()
    
    '参照設定
    'Microsoft ActiveX Data Objects 6.1 Library

    Dim cn As New ADODB.Connection
    Dim rs As New ADODB.Recordset
    Dim ConStr As String
    Dim DBFile As String
    Dim strSQL As String
    Dim FieldArray
    Dim i As Long
    Dim j As Long
    Dim v As Variant
    
    ReDim FieldArray(1 To 1)
        
    DBFile = ActiveWorkbook.Path & "\mydb1.accdb"
    ConStr = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & DBFile     'Access 2007 以降
    'ConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" & DBFile     'Access 2003 以前
    
    cn.ConnectionString = ConStr
    cn.Open
    
    strSQL = "Select * from 社員名簿 order by ID desc;"
    rs.Source = strSQL
    rs.ActiveConnection = cn
    rs.Open

    With Worksheets("Sheet1")
        
        .Cells.Clear
        
        i = 1
        Do Until rs.EOF
            For j = 0 To rs.Fields.Count - 1
                .Cells(i, j + 1) = rs(j).Value
            Next j
            rs.movenext
            i = i + 1
        Loop
    
    End With
    
    rs.Close
    Set rs = Nothing
    
    cn.Close
    Set cn = Nothing
    
End Sub


　
Sub Sample_ADO_Access2()
    
    'CreateObject 関数

    Dim cn As Object
    Dim rs As Object
    Dim ConStr As String
    Dim DBFile As String
    Dim strSQL As String
    Dim FieldArray
    Dim i As Long
    Dim j As Long
    Dim v As Variant
    
    ReDim FieldArray(1 To 1)
    
    Set cn = CreateObject("ADODB.Connection")
    Set rs = CreateObject("ADODB.Recordset")
    
    DBFile = ActiveWorkbook.Path & "\mydb1.accdb"
    ConStr = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & DBFile      'Access 2007 以降
    'ConStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" & DBFile      'Access 2003 以前
    
    cn.Open ConnectionString:=ConStr & ";"
    
    strSQL = "Select * from 社員名簿;"

    rs.Open strSQL, cn
    
    'フィールド名取得
    j = 1
    For Each v In rs.Fields
        
        ReDim Preserve FieldArray(1 To j)
        FieldArray(j) = v.Name
        j = j + 1
    
    Next

    'Sheet1 に表示
    With Worksheets("Sheet1")
        
        .Cells.Clear
        
        'フィールド名
        .Range(.Cells(1, 1), .Cells(1, UBound(FieldArray))) = FieldArray
        
        'レコード
        .Range("A2").CopyFromRecordset rs
    
    End With
    
DBEnd:
    rs.Close
    Set rs = Nothing
    
    cn.Close
    Set cn = Nothing

End Sub
　
*********************************************************************************************
VBAで参照設定をしないでADOを使ってAccessDBへ接続する
https://ateitexe.com/vba-ado-not-reference/

'参照設定あり
Sub Sample()
  Dim adoCn As ADODB.Connection 'ADOコネクションオブジェクト
  Dim adoRs As ADODB.Recordset 'ADOレコードセットオブジェクト
  Dim strSQL As String 'SQL文
  
  'AccessVBAで現在のデータベースへ接続する場合
  'Set adoCn = CurrentProject.Connection
  
  '外部のAccessファイルを指定して接続する場合
  Set adoCn = New ADODB.Connection 'ADOコネクションのインスタンス作成
  adoCn.Open "Provider=Microsoft.ACE.OLEDB.12.0;" & _
             "Data Source=C:\SampleData.accdb;" 'Accessファイルを指定
             
  strSQL = "任意のSQL文"
  
  '追加・更新・削除の場合----------------------------------
  'adoCn.Execute strSQL 'SQLを実行
  '--------------------------追加・更新・削除の場合ここまで
  
  '読込の場合----------------------------------------------
  Set adoRs = New ADODB.Recordset 'ADOレコードセットのインスタンス作成
  adoRs.Open strSQL, adoCn 'レコード抽出
  Do Until adoRs.EOF '抽出したレコードが終了するまで処理を繰り返す
    Debug.Print adoRs!フィールド名 'フィールドを取り出す
    adoRs.MoveNext '次のレコードに移動する
  Loop
  adoRs.Close: Set adoRs = Nothing 'レコードセットの破棄
  '--------------------------------------読込の場合ここまで
  
  adoCn.Close: Set adoCn = Nothing 'コネクションの破棄
End Sub

'参照設定なし
Sub Sample()
  Dim adoCn As Object 'ADOコネクションオブジェクト
  Dim adoRs As Object 'ADOレコードセットオブジェクト
  Dim strSQL As String 'SQL文
  
  'AccessVBAで現在のデータベースへ接続する場合
  'Set adoCn = CurrentProject.Connection
  
  '外部のAccessファイルを指定して接続する場合
  Set adoCn = CreateObject("ADODB.Connection") 'ADOコネクションのオブジェクトを作成
  adoCn.Open "Provider=Microsoft.ACE.OLEDB.12.0;" & _
             "Data Source=C:\SampleData.accdb;" 'Accessファイルを指定
             
  strSQL = "任意のSQL文"
  
  '追加・更新・削除の場合----------------------------------
  'adoCn.Execute strSQL 'SQLを実行
  '--------------------------追加・更新・削除の場合ここまで
  
  '読込の場合----------------------------------------------
  Set adoRs = CreateObject("ADODB.Recordset") 'ADOレコードセットのオブジェクトを作成
  adoRs.Open strSQL, adoCn 'レコード抽出
  Do Until adoRs.EOF '抽出したレコードが終了するまで処理を繰り返す
    Debug.Print adoRs!フィールド名 'フィールドを取り出す
    adoRs.MoveNext '次のレコードに移動する
  Loop
  adoRs.Close: Set adoRs = Nothing 'レコードセットの破棄
  '--------------------------------------読込の場合ここまで
  
  adoCn.Close: Set adoCn = Nothing 'コネクションの破棄
End Sub

**********************************************************************************
【Excel・Access VBA】データベース接続用クラスで時短プログラミング
https://www.depthbomb.net/?p=895

ADO接続クラスモジュール
Option Explicit
Private mCon As ADODB.Connection
'Connectionオブジェクトを生成
Public Sub connect()
    Dim Cn As String
    Dim srvName As String
    Dim dbName As String
    Dim loginName As String
    Dim loginPass As String
    'データベース接続情報を定義します。'
    srvName = "サーバホスト名 or IP"
    dbName = "データベース名"
    loginName = "ユーザー名"
    loginPass = "パスワード"
    
        Cn = _
            "Driver={SQL Server};" & _
                " server=" & srvName & "; database=" & dbName & "; uid=" & loginName & "; pwd=" & loginPass & ";"
    Set mCon = New ADODB.Connection
    mCon.CursorLocation = adUseClient
    mCon.Open Cn
End Sub
'データベースへの接続を切断します。
Public Sub disconnect()
    mCon.Close
    Set mCon = Nothing
End Sub
'引数のSQL文を実行し、ADODB.Recordsetを返します。
Public Function execute(sql As String) As ADODB.Recordset
    Dim rs As New ADODB.Recordset
    'タイムアウト設定 (30分)
    mCon.CommandTimeout = 60 * 30
    '処理された行数を示すメッセージが結果セットの一部として返されないようにする
    mCon.execute ("SET NOCOUNT ON")
    '警告メッセージが結果セットの一部として返されないようにする
    mCon.execute ("SET ANSI_WARNINGS OFF")
    'オーバーフローおよび0除算時にはNULLを返す
    mCon.execute ("SET ARITHABORT OFF")
    rs.Open sql, mCon, adOpenStatic, adLockBatchOptimistic
    Do
        'レコードの操作ができるオブジェクト若しくは次のRecordSetがとれず、コネクションが空になった場合終了
        If rs.State = adStateOpen Or rs.ActiveConnection Is Nothing Then
            Exit Do
        End If
        Set rs = rs.NextRecordset()
    Loop
    Set execute = rs
    '設定OFF
    mCon.execute ("SET NOCOUNT OFF")
    mCon.execute ("SET ANSI_WARNINGS ON")
    mCon.execute ("SET ARITHABORT ON")
End Function
'トランザクションを開始する
Public Sub BeginTransaction()
    mCon.BeginTrans
End Sub
'トランザクションをコミットする
Public Sub CommitTransaction()
    mCon.CommitTrans
End Sub
'トランザクションをロールバックする
Public Sub RollbackTransaction()
    mCon.RollbackTrans
End Sub
******************************************こっちのほうが良い？***********************************************************
データベースの処理をクラスモジュールに書く
https://excelwork.info/excel/adodbclass/


クラスモジュール
Option Explicit

'-------------------------------------------------------------------------------------
'接続処理
'-------------------------------------------------------------------------------------
'Access に接続
Const ACCESSDB = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & _
                 "C:\Users\excelwork.info\excel\" & _
                 "mydb1.accdb"

'Excel に接続
Const EXCELDB = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & _
                 "C:\Users\excelwork.info\excel\" & _
                "excel_データベース.xlsx" & _
                ";Extended Properties=""Excel 12.0;HDR=Yes;"""


Private cn As ADODB.Connection
Private rs As ADODB.Recordset

'-------------------------------------------------------------------------------------
' コンストラクタ
'-------------------------------------------------------------------------------------
Private Sub class_initialize()

    If Not rs Is Nothing Then rs.Close

End Sub

'-------------------------------------------------------------------------------------
' デストラクタ
'-------------------------------------------------------------------------------------
Private Sub class_terminate()
    
    On Error Resume Next
    If Not rs Is Nothing Then rs.Close
    Set rs = Nothing
    
    cn.Close
    Set cn = Nothing
    
End Sub

'-------------------------------------------------------------------------------------
' データベース接続
'【引数】DBType    接続するDBを指定
'                  accessdb … Accessデータベースへ接続
'                  excelldb … Excelをデータベースとして接続
'【戻値】接続成功：True ／ 接続失敗：False（Boolean）
'-------------------------------------------------------------------------------------
Public Function DBConnect(ByVal DBType As String) As Boolean

    Dim ConnectingString As String
    
    Select Case DBType
    
        Case "accessdb"
            ConnectingString = ACCESSDB
        
        Case "exceldb"
            ConnectingString = EXCELDB
        
        Case Else
            GoTo ErrHandler
    
    End Select
    
    On Error GoTo ErrHandler
    
    Set cn = New ADODB.Connection
    cn.ConnectionString = ConnectingString
    cn.ConnectionTimeout = 2
    cn.Open
    DBConnect = True
    
    Exit Function
    
ErrHandler:
    DBConnect = False
    
    
End Function

'-------------------------------------------------------------------------------------
' SQL文を実行する（Select 文）
'【引数】strSQL    SQL文
'【戻値】Recordset オブジェクト
'-------------------------------------------------------------------------------------
Public Function Run(strSQL As String) As ADODB.Recordset

    Set rs = New ADODB.Recordset
    
    'SQL文実行（読み取り専用、共有ロック）
    rs.Open strSQL, cn, adOpenKeyset, adLockOptimistic, adCmdText
    
    Set Run = rs

End Function

'-------------------------------------------------------------------------------------
' SQL文を実行する（Insert into文、Delete 文など）
'【引数】strSQL    SQL文（String）
'【戻値】変更されたレコード数（Long）
'-------------------------------------------------------------------------------------
Public Function Exec(strSQL As String) As Long

    Dim ARecNum As Long
    
    cn.Execute strSQL, ARecNum
    
    Exec = ARecNum

End Function

'-------------------------------------------------------------------------------------
'トランザクション開始
'-------------------------------------------------------------------------------------
Public Sub BeginTr()
    cn.BeginTrans
End Sub

'-------------------------------------------------------------------------------------
' トランザクションコミット
'-------------------------------------------------------------------------------------
Public Sub CommitTr()
    cn.CommitTrans
End Sub

'-------------------------------------------------------------------------------------
' トランザクションロールバック
'-------------------------------------------------------------------------------------
Public Sub RollbackTr()
    cn.RollbackTrans
End Sub

*********************************************************************************
標準モジュール
　
'-------------------------------------------------------------------------------
' 【クラス・データベース】
' Access ファイル（mydb1.accdb）に接続し、
' 社員フィールドの重複レコードを削除
'-------------------------------------------------------------------------------
Sub Sample_DataBaseClass_Access()

    '参照設定:Microsoft ActiveX Data Objects 6.1 Library

    Dim DBFileName As String
    Dim DBClass As DBConnection
    Dim rs As ADODB.Recordset
    Dim strSQL As String
    Dim i As Long
    Dim j As Long
    Dim del_num()
    Dim tmp As String
    
    On Error GoTo ErrHandler_End
    
    Set DBClass = New DBConnection
    DBClass.DBConnect ("accessdb")
    
    strSQL = "select 社員, ID from テーブル6 " & _
             "where 社員 in " & _
             "( select 社員 from テーブル6 as tmp group by 社員 " & _
             "having count(*)>1) " & _
             "order by 社員,ID"
    
    Set rs = DBClass.Run(strSQL)
    
    i = 0
    tmp = ""
    Do Until rs.EOF
        If tmp = rs(0).Value Then
            ReDim Preserve del_num(i)
            del_num(i) = CLng(rs(1).Value)
            i = i + 1
        Else
            tmp = rs(0).Value
        End If
        rs.MoveNext
    Loop
    
    On Error GoTo 0
    On Error GoTo ErrHandler
    
    'トランザクション開始
    DBClass.BeginTr
    
    strSQL = "delete from テーブル6 where ID in (" & Join(del_num, ",") & ")"
    DBClass.Exec (strSQL)
    
    'トランザクション終了（変更の保存）
    DBClass.CommitTr
    
    On Error GoTo 0
    
ErrHandler:
    If Err.Number <> 0 Then
        'トランザクション終了（変更の破棄）
        DBClass.RollbackTr
        MsgBox "データは変更されませんでした"
    End If
    
    Set rs = Nothing
    Set DBClass = Nothing
    
    Exit Sub

ErrHandler_End:
    MsgBox "データベースエラー"

End Sub

********************************************************************************************
　
'-------------------------------------------------------------------------------
' 【クラス・データベース】
' Excel ファイル（excel_データベース.xlsx）にデータベースとして接続し、
' 商品一覧表を表示する
'-------------------------------------------------------------------------------
Sub Sample_DataBaseClass_Excel()

    '参照設定:Microsoft ActiveX Data Objects 6.1 Library

    Dim DBFileName As String
    Dim DBClass As DBConnection
    Dim rs As ADODB.Recordset
    Dim strSQL As String
    Dim i As Long
    Dim j As Long
    
    On Error GoTo ErrHandler
    
    Set DBClass = New DBConnection
    DBClass.DBConnect ("exceldb")
    
    strSQL = "select * from [Sheet1$]"
    Set rs = DBClass.Run(strSQL)
    
    With Worksheets("Sheet1")
        .Cells.Clear
        i = 1
        .Cells.Clear
        Do Until rs.EOF
            For j = 0 To rs.Fields.Count - 1
                If i = 1 Then .Cells(i, j + 1) = rs(j).Name
                .Cells(i + 1, j + 1) = rs(j).Value
            Next j
            rs.MoveNext
            i = i + 1
        Loop
        .Columns("A:H").AutoFit
    End With
    
    Set rs = Nothing
    Set DBClass = Nothing
    
    Exit Sub
    
ErrHandler:
    MsgBox "データベースエラー"

End Sub

*************************************************************************************************
ADODB.Streamを使ったテキストファイルの読み書き
https://k-sugi.sakura.ne.jp/it_synthesis/windows/vb/3650/

テキストファイルの読み込み
Dim sr      As Object
Dim strData As String
Set sr = CreateObject("ADODB.Stream")
sr.Mode = 3 '読み取り/書き込みモード
sr.Type = 2 'テキストデータ
sr.Charset = "UTF-8" '文字コードを指定
sr.Open 'Streamオブジェクトを開く
sr.LoadFromFile ("ファイルのフルパス") 'ファイルの内容を読み込む
sr.Position = 0 'ポインタを先頭へ
strData = sr.ReadText() 'データ読み込み
sr.Close 'Streamを閉じる
Set sr = Nothing 'オブジェクトの解放

テキストファイルの書き込み
Dim sr      As Object
Dim strData As String

Set sr = CreateObject("ADODB.Stream")

sr.Mode = 3 '読み取り/書き込みモード
sr.Type = 2 'テキストデータ
sr.Charset = "UTF-8" '文字コードを指定

sr.Open 'Streamオブジェクトを開く
sr.WriteText strData, 0 '0:adWriteChar

sr.SaveToFile "ファイルのフルパス", 2 '2:adSaveCreateOverWrite

sr.Close 'Streamを閉じる

Set sr = Nothing 'オブジェクトの解放
********************************************************************************************************
【Access】非連結フォームデータ検索・更新・追加・削除（VBA処理）
https://pctips.jp/pc-soft/access-serach-vba-howto201907/

Private Sub 商品名検索_AfterUpdate()

Dim stCD As String
Dim cn As New ADODB.Connection
Dim rs As New ADODB.Recordset

Set cn = CurrentProject.Connection
rs.CursorLocation = adUseClient
rs.Open "商品マスタ", cn, adOpenKeyset, adLockOptimistic

rs.Filter = "商品名 Like '*" & Me!商品名検索 & "*'"

Set Me.Recordset = rs
If rs.EOF Then
MsgBox ("条件に一致するデータは存在しませんでした。")
With Me
!call_ID = ""
!call_商品名 = ""
!call_分類 = ""
!call_値段 = ""
End With

Else

With Me
!call_ID = rs!ID
!call_商品名 = rs!商品名
!call_分類 = rs!分類
!call_値段 = rs!値段
End With

End If

rs.Close: Set rs = Nothing
cn.Close: Set cn = Nothing
商品名検索 = Nul

Me.Visible = False
Me.Visible = True
Me.商品名検索.SetFocus

End Sub

Private Sub btn_更新_Click()

Dim cn As New ADODB.Connection
Dim rs As New ADODB.Recordset
Dim SQL As String

On Error GoTo ErrRtn

If IsNull(call_ID) Then
MsgBox ("データが選択されていません。")
Exit Sub
End If

If MsgBox("更新しますか？ yes/no", vbYesNo, "更新確認") = vbYes Then

SQL = "SELECT * FROM 商品マスタ WHERE ID =" & Me!call_ID & ""

Set cn = CurrentProject.Connection
rs.Open SQL, cn, adOpenKeyset, adLockOptimistic

cn.BeginTrans

While Not rs.EOF

rs!商品名 = call_商品名
rs!分類 = call_分類
rs!値段 = call_値段

rs.Update
rs.MoveNext
Wend

cn.CommitTrans

rs.Close: Set rs = Nothing
cn.Close: Set cn = Nothing

Else
MsgBox ("更新しませんでした。")
Exit Sub

End If

ExitErrRtn:
DoCmd.ShowAllRecords
Exit Sub

ErrRtn:
MsgBox "エラー： " & Err.Description

cn.RollbackTrans
rs.Close: Set rs = Nothing
cn.Close: Set cn = Nothing

End Sub

Private Sub btn_追加_Click()

Dim cn As New ADODB.Connection
Dim rs As New ADODB.Recordset

If IsNull(call_商品名) Then
MsgBox ("商品名が入力されていません。")
Exit Sub
End If

If IsNull(call_分類) Then
MsgBox ("分類が入力されていません。")
Exit Sub
End If

If MsgBox("追加しますか？ yes/no", vbYesNo, "データ追加確認") = vbYes Then

On Error GoTo ErrRtn

Set cn = CurrentProject.Connection
Set rs = New ADODB.Recordset
rs.Open "商品マスタ", cn, adOpenKeyset, adLockOptimistic

' トランザクションの開始
cn.BeginTrans

rs.AddNew

rs!商品名 = call_商品名
rs!分類 = call_分類
rs!値段 = call_値段

rs.Update
MsgBox ("追加しました。")

' トランザクションの保存
cn.CommitTrans

rs.Close: Set rs = Nothing
cn.Close: Set cn = Nothing

Else

MsgBox ("追加しませんでした。")
Exit Sub

End If

ExitErrRtn:
call_ID = Null
call_商品名 = Null
call_分類 = Null
call_値段 = Null

Exit Sub

ErrRtn:
MsgBox "エラー： " & Err.Description
'BeginTransの時点まで戻り、変更をキャンセルする

cn.RollbackTrans
rs.Close: Set rs = Nothing
cn.Close: Set cn = Nothing

End Sub

Private Sub btn_削除_Click()

Dim CN As ADODB.Connection
Dim RS As ADODB.Recordset

On Error GoTo ErrRtn

If MsgBox("実行しますか？ yes/no", vbYesNo, "削除確認") = vbYes Then

Set CN = CurrentProject.Connection
Set RS = New ADODB.Recordset

CN.BeginTrans

RS.Open "商品マスタ", CN, adOpenStatic, adLockOptimistic

' Debug.Print Me.call_ID

RS.Find "ID = " & call_ID

RS.Delete

CN.CommitTrans

RS.Close: Set RS = Nothing
CN.Close: Set CN = Nothing

Else

MsgBox "削除しませんでした。"

Exit Sub
End If

ExitErrRtn:

DoCmd.ShowAllRecords
Exit Sub

ErrRtn:
MsgBox "エラー： " & Err.Description
CN.RollbackTrans
RS.Close: Set RS = Nothing
CN.Close: Set CN = Nothing

End Sub